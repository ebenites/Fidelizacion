@model Fidelizacion.Models.FichaAfiliacionViewModel


@section scripts {

    <script type="text/javascript">

        function limpiarDatosPersonales() {
            //alert("entro");
            //alert($('#numero_documento'));
            //alert($('#numero_documento').val());
            $('#numero_documento').val('')
            $('#nombre').val('')
            $('#numero_documento').val('')
            $('#apellidos').val('')
            $('#fecha_nacimiento').val('')
            $('#correo').val('')
            $('#numero_telefono').val('')
            $('#direccion').val('')
            $('#celular').val('')
            //$('#distrito option[value="Lima"]')
            $("#distrito").val("Lima").change();
            $("#provincia").val("Lima").change();
            $("#fk_tipo_documento").val("1").change();
            $("#sexo").val("M").change();
            $("#estado_civil").val("S").change();
            // $('#provincia').attr("value", "Lima");
            //$('#distrito').attr("value", "Lima");

        }

        function limpiarDatosGenerarCuenta() {

            $('#tipo_cuenta').val("1").change();
            $('#cuenta_titular').val('')
            $('#fk_cuenta_titular').val('')
            $('#cuenta_titular').attr("readonly", true);

            //$('#puntos').val('')
            //$('#numero_cuenta').val('')
            //$('#generarbtn').prop('disabled', false);
            //$('[name="numero_cuenta"]').val('');

            // $('#cuenta_titular').attr("readonly", true);
            $('#buscar_cuentatitular').attr("disabled", true);

            $('#labelCuentaTitular').removeClass("required-field");

            $('#validacionfk_cuenta_titular').text('');
            //
            // $('#provincia').attr("value", "Lima");
            //$('#distrito').attr("value", "Lima");

        }


        function limpiarDatosTarjeta() {


            //$('#numero_cuenta').val('')
            $('#numero_tarjeta').val('')
            $('#fk_tarjeta_afiliacion').val('')
            //$('[name="numero_cuenta"]').val('')

            $('#validacionfk_tarjeta_afiliacion').text('');

        }

        function procesarFormulario() {

            // Validar numero_documento
            var numero_documento = $('[name="numero_documento"]')
            if (numero_documento.val() == '') {
                numero_documento.next().text(numero_documento.data('val-required'));
                bootbox.alert(numero_documento.data('val-required'));
                return;
            }

            // Si es DNI
            $('[name="numero_documento"]').next().text('');
            if ($('[name="fk_tipo_documento"]').val() == '1') {

                // Validar numero_documento DNI
                var numero_documento = $('[name="numero_documento"]');
                if (numero_documento.val().length != 8) {
                    numero_documento.next().text('El numero de DNI debe contener los 8 dígitos');
                    bootbox.alert('El numero de DNI debe contener los 8 dígitos');
                    return;
                }

            } else {

                // Validar numero_documento Carne de Extrangeria
                var numero_documento = $('[name="numero_documento"]');
                if (numero_documento.val().length != 12) {
                    numero_documento.next().text('El numero de Carné Extranjería debe contener los 12 dígitos');
                    bootbox.alert('El numero de Carné Extranjería debe contener los 12 dígitos');
                    return;
                }

            }

            // Validar nombres
            var nombre = $('[name="nombre"]')
            if (nombre.val() == '') {
                nombre.next().text(nombre.data('val-required'));
                bootbox.alert(nombre.data('val-required'));
                return;
            }

            // Validar apellidos
            var apellidos = $('[name="apellidos"]')
            if (apellidos.val() == '') {
                apellidos.next().text(apellidos.data('val-required'));
                bootbox.alert(apellidos.data('val-required'));
                return;
            }

            // Validar edad
            var fnacimiento = $('[name="fecha_nacimiento"]');

            if (fnacimiento.val() == '') {
                fnacimiento.next().text(fnacimiento.data('val-required'));
                bootbox.alert(fnacimiento.data('val-required'));
                return;
            }

            var years = moment().diff(fnacimiento.val(), 'years');
            if (years < 18) {
                fnacimiento.next().text('El afiliado debe ser mayor de edad.');
                bootbox.alert('El afiliado debe ser mayor de edad.');
                return;
            } else if (years > 90) {
                fnacimiento.next().text('No se  puede registrar un afiliado mayor a los 90 años');
                bootbox.alert('No se  puede registrar un afiliado mayor a los 90 años');
                return;
            }
            //console.log(years)

            // Validar correo
            var correo = $('[name="correo"]')
            if (correo.val() == '') {
                correo.next().text(correo.data('val-required'));
                bootbox.alert(correo.data('val-required'));
                return;
            }

            // Validar numero_cuenta
            var numero_cuenta = $('[name="numero_cuenta"]');
            numero_cuenta.next().text('');
            if (numero_cuenta.val() == '') {
                numero_cuenta.next().text(numero_cuenta.data('val-required'));
                bootbox.alert(numero_cuenta.data('val-required'));
                return;
            }

            // Si Tipo cuenta == 2
            $('[name="fk_cuenta_titular"]').next().text('');
            if ($('[name="tipo_cuenta"]').val() == '2') {

                // Validar fk_cuenta_titular
                var fk_cuenta_titular = $('[name="fk_cuenta_titular"]');
                if (fk_cuenta_titular.val() == '') {
                    fk_cuenta_titular.next().text("No se selecciono una cuenta titular.");
                    bootbox.alert("No se selecciono una cuenta titular.");
                    return;
                }

            }

            // Validar fk_tarjeta_afiliacion
            var fk_tarjeta_afiliacion = $('[name="fk_tarjeta_afiliacion"]')
            fk_tarjeta_afiliacion.next().text('');
            if (fk_tarjeta_afiliacion.val() == '') {
                fk_tarjeta_afiliacion.next().text("No se selecciono un Tarjeta.");
                bootbox.alert("No se selecciono un Tarjeta.");
                return;
            }

            // Submit
            bootbox.confirm("¿Está seguro de grabar al afiliado y generar el contrato de afiliación?", function (result) {
                if (result) {
                    $('#formularioCrear').submit();
                }
            });

            // Fixed al boton
            $('div.bootbox-confirm [data-bb-handler="confirm"]').text('Confirmar');
            $('div.bootbox-confirm [data-bb-handler="cancel"]').text('Cancelar');
        }

        function cargarCuentaTitular() {

            $.post('@Url.Content("~/FichaAfiliacion/GetTitulares")', { }, function (data) {

                $('.titular-lista').html(data);

                bootbox.dialog({
                    message: $('#titular-template').html(),
                    title: "Buscar Cuenta Titular",
                    size: 'large'
                });

                $('.titular-lista table.table').DataTable({
                    'pageLength': 5,
                    'bLengthChange': false,
                    'bFilter': false,
                    'bInfo': false,
                    'language': {
                        'paginate': {
                            'next': 'Siguiente',
                            'previous': 'Anterior'
                        }
                    }
                });

            })

            /*bootbox.dialog({
                message: '<iframe width="100%" height="560" src="'+url+'" frameborder="0" allowfullscreen></iframe>',
                title: "Buscar Cuenta Titular"
            });*/

            //Window.popup("Prueba",@Url.Content("~/FichaAfiliacion/GetTitulares"));
            @*var cuentaTitular2 = $('#cuenta_titular').val();


            //bootbox.alert(cuentaTitular2)
            var objeto = {
                cuenta_titular: cuentaTitular2
            }
            $.ajax({
                url: '@Url.Content("~/FichaAfiliacion/GetCuentaTitular")',
                type: "GET",
                contentType: "application/json",
                data: { cuenta_titular: cuentaTitular2},
                dataType: "json",
                success: function (response) {
                    try {



                        if (response.operacion) {

                            $('#fk_cuenta_titular').attr('value', response.objeto.id_cuenta);
                            $('#validacionfk_cuenta_titular').text('');
                            bootbox.alert('Número de cuenta de titular encontrada y asignada.');

                        } else
                        {
                            bootbox.alert(response.mensaje)
                            $('#validacionfk_cuenta_titular').text(response.mensaje);
                            $('#fk_cuenta_titular').attr('value', "");

                        }

                    } catch (e) {
                        bootbox.alert(e.message)
                    }

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    bootbox.alert("Se encontro un error al ejecutar la operacion, vuelva a intentarlo más tarde");

                }


            });*@

        }

        function seleccionarTitular() {
            var cuenta = $('[name="titulares-cuenta"]:checked').val();
            $('[name="fk_cuenta_titular"]').val(cuenta);

            var numero = $('[name="titulares-cuenta"]:checked').data('numero');
            $('[name="cuenta_titular"]').val(numero);

            bootbox.hideAll();
        }

        function filtrarTitular() {

            var dni = $('.bootbox [name="titular-dni"]').val();
            
            $.post('@Url.Content("~/FichaAfiliacion/GetTitulares")', { 'dni': dni }, function (data) {

                $('.bootbox .titular-lista').empty();

                $('.bootbox .titular-lista').html(data);
                
                $('.bootbox .titular-lista table.table').DataTable({
                    'pageLength': 5,
                    'bLengthChange': false,
                    'bFilter': false,
                    'bInfo': false,
                    'language': {
                        'paginate': {
                            'next': 'Siguiente',
                            'previous': 'Anterior'
                        }
                    }
                });
            });
        }

        function buscarNumeroTarjeta() {

            $.post('@Url.Content("~/FichaAfiliacion/GetTarjetas")', {}, function (data) {

                $('.tarjeta-lista').html(data);

                bootbox.dialog({
                    message: $('#tarjeta-template').html(),
                    title: "Buscar Tarjeta de Afiliación"
                    //size: 'large'
                });

                $('.tarjeta-lista table.table').DataTable({
                    'pageLength': 5,
                    'bLengthChange': false,
                    'bFilter': false,
                    'bInfo': false,
                    'language': {
                        'paginate': {
                            'next': 'Siguiente',
                            'previous': 'Anterior'
                        }
                    }
                });

                $('.bootbox [name="tarjeta-numero"]').keydown(function (e) {
                    // Allow: backspace, delete, tab, escape, enter and .
                    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13/*, 110, 190*/]) !== -1 ||
                        // Allow: Ctrl+A
                        (e.keyCode == 65 && e.ctrlKey === true) ||
                        // Allow: Ctrl+C
                        (e.keyCode == 67 && e.ctrlKey === true) ||
                        // Allow: Ctrl+X
                        (e.keyCode == 88 && e.ctrlKey === true) ||
                        // Allow: home, end, left, right
                        (e.keyCode >= 35 && e.keyCode <= 39)) {
                        // let it happen, don't do anything
                        return;
                    }
                    // Ensure that it is a number and stop the keypress
                    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                        e.preventDefault();
                    }
                });

            })

            @*var cuentaTitular2 = $('#numero_tarjeta').val();

            //bootbox.alert(cuentaTitular2)
            var objeto = {
                cuenta_titular: cuentaTitular2
            }
            $.ajax({
                url: '@Url.Content("~/FichaAfiliacion/GetTarjetaAfiliacion")',
                type: "GET",
                contentType: "application/json",
                data: { numero_tarjeta: cuentaTitular2 },
                dataType: "json",
                success: function (response) {
                    try {


                        if (response != null) {
                            if (response.operacion) {
                                //bootbox.alert(response.objeto.numero_tarjeta)
                                $('#irAdministrar').css('display', 'none');
                                $('#fk_tarjeta_afiliacion').attr('value', response.objeto.id_tarjeta_afiliacion);
                                $('#validacionfk_tarjeta_afiliacion').text('');
                                //bootbox.alert($('#fk_tarjeta_afiliacion').val());
                                bootbox.alert('Número de tarjeta encontrada y asignada.');
                            } else {
                                bootbox.alert(response.mensaje)
                                $('#validacionfk_tarjeta_afiliacion').text(response.mensaje);
                                $('#fk_tarjeta_afiliacion').attr('value', "");
                            }

                            if (response.mostrarLink) {

                                $('#irAdministrar').css('display', 'block');
                            }

                        }




                    } catch (e) {
                        bootbox.alert(e.message)
                    }

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    bootbox.alert("Se encontro un error al ejecutar la operacion, vuelva a intentarlo más tarde");

                }


            });*@

        }

        function seleccionarTarjeta() {
            var cuenta = $('[name="tarjetas-cuenta"]:checked').val();
            $('[name="fk_tarjeta_afiliacion"]').val(cuenta);

            var numero = $('[name="tarjetas-cuenta"]:checked').data('numero');
            $('[name="numero_tarjeta"]').val(numero);

            bootbox.hideAll();
        }
        
        function filtrarTarjeta() {

            var numero = $('.bootbox [name="tarjeta-numero"]').val();

            $.post('@Url.Content("~/FichaAfiliacion/GetTarjetas")', { 'numero': numero }, function (data) {

                $('.bootbox .tarjeta-lista').empty();

                $('.bootbox .tarjeta-lista').html(data);

                $('.bootbox .tarjeta-lista table.table').DataTable({
                    'pageLength': 5,
                    'bLengthChange': false,
                    'bFilter': false,
                    'bInfo': false,
                    'language': {
                        'paginate': {
                            'next': 'Siguiente',
                            'previous': 'Anterior'
                        }
                    }
                });
            });
        }

        function crearTarjeta() {
            var dialog = bootbox.dialog({
                message: $('#tarjeta-nuevo-template').html(),
                title: "Nueva Tarjeta de Afiliación"
            });

            $('.bootbox .form-tarjeta input[value="Salir"]').click(function () {
                dialog.modal('hide');
            });

            console.log($('.bootbox .form-tarjeta [name="numeroTarjeta"]'));

            $('.bootbox .form-tarjeta [name="numeroTarjeta"]').keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13/*, 110, 190*/]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: Ctrl+C
                    (e.keyCode == 67 && e.ctrlKey === true) ||
                    // Allow: Ctrl+X
                    (e.keyCode == 88 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        }

        function grabarTarjeta() {
            var tarjetaInput = $('.bootbox .form-tarjeta [name="numeroTarjeta"]');
            var tarjetaNumero = tarjetaInput.val();

            if (tarjetaNumero == '') {
                tarjetaInput.next().text(tarjetaInput.data('val-required'));
                bootbox.alert(tarjetaInput.data('val-required'));
                return;
            }
            tarjetaInput.next().text('');

            if (tarjetaNumero.length != 12) {
                tarjetaInput.next().text(tarjetaInput.data('val-length'));
                bootbox.alert(tarjetaInput.data('val-length'));
                return;
            }
            tarjetaInput.next().text('');

            $.post('@Url.Content("~/FichaAfiliacion/AddTarjeta")', { 'numeroTarjeta': tarjetaNumero }, function (data) {

                if (data.Type == 'error') {
                    tarjetaInput.next().text(data.Message);
                    bootbox.alert(data.Message);
                } else {
                    bootbox.alert(data.Message);
                    $('.bootbox [name="tarjeta-numero"]').val(tarjetaNumero);
                    $('.bootbox .form-tarjeta input[value="Salir"]').trigger('click');
                    $('.bootbox input[value="Filtrar"]').trigger('click');
                }

            }, 'json').fail(function (error) { bootbox.alert('Error interno en el servidor: ' + error.responseText) });;
        }

        function habilitarCuentaTitular(obj) {

            var tipoCuenta = obj.value;


            if (tipoCuenta == "2") {

                //$('#cuenta_titular').attr("readonly", false);
                $('#buscar_cuentatitular').attr("disabled", false);

                $('#labelCuentaTitular').addClass("required-field");

            } else {
                //$('#cuenta_titular').attr("readonly", true);

                $('[name="cuenta_titular"]').val('');
                $('[name="fk_cuenta_titular"]').val('');


                $('#buscar_cuentatitular').attr("disabled", true);

                $('#labelCuentaTitular').removeClass("required-field");

            }


        }
        $(function () {
            $('#estado_afiliado').val('Activo');
            //$('#tipo_cuenta').val('1');
            $('#fecha_alta').val(moment().format('YYYY-MM-DD'));
            $("#fk_tipo_documento").val("1").change();
            $('#estado').val('A');

            $('#fecha_asignacion').datetimepicker({
                format: "YYYY-MM-DD",
                defaultDate: moment(),
                locale: "es"
            });

            $('input[name="fecha_nacimiento"]').datetimepicker({
                format: "YYYY-MM-DD",
                locale: "es"
            });


            $('input[name="fecha_alta"]').datetimepicker({
                format: "YYYY-MM-DD",
                locale: "es"
            });
            limpiarDatosGenerarCuenta();
            $('#motivo').val('Alta de Afiliado');

            //$('[name="fecha_nacimiento"]').val(moment().subtract(18, 'years').format('YYYY-MM-DD'));

            $('[name="numero_documento"]').keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13/*, 110, 190*/]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: Ctrl+C
                    (e.keyCode == 67 && e.ctrlKey === true) ||
                    // Allow: Ctrl+X
                    (e.keyCode == 88 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            $('[name="numero_telefono"], [name="celular"]').keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13/*, 110, 190*/]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: Ctrl+C
                    (e.keyCode == 67 && e.ctrlKey === true) ||
                    // Allow: Ctrl+X
                    (e.keyCode == 88 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });



            $('input, select').garlic({
                onRetrieve: function (elem, retrievedValue) {
                    $('#auto-save').show();
                }
            });

        });

        function generar(obj) {
            var ncuenta = Math.round(Math.random() * 10000000000000000);
            $('[name="numero_cuenta"]').val(ncuenta);
            $('[name="puntos"]').val(100);

            obj.disabled = true;
        }

        function validar() {

            try {

                var campoNumeroDocumento = $("#numero_documento")

                valor = $('[name="fk_tipo_documento"]').val();
                if (valor == 1) {
                    campoNumeroDocumento.attr("maxlength", 8);
                    var numeroDocumento = campoNumeroDocumento.val();

                   
                    if (numeroDocumento != null && numeroDocumento.length > 8) {
                        
                        var nuevoNumero = numeroDocumento.substr(0, 8);
                        
                        campoNumeroDocumento.val(nuevoNumero);
                    }
                } else {
                    campoNumeroDocumento.attr("maxlength", 12);
                }
                
            } catch (e) {
                alert(e.message);
            }
            
        }

    </script>
}

@{
    ViewBag.Title = "Nuevo Afiliado";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .required-field:after {
        color: #d00;
        content: "(*)";
        position: absolute;
        margin-left: 3px;
        top: 10px;
    }
</style>

<div id="auto-save" class="alert alert-warning" role="alert" style="display: none">
    Se tiene un afiliado pendiente de grabar. &nbsp; <button class="btn btn-default" onclick="$('input, select').garlic('destroy'); location.reload();">Limpiar Formulario</button>
</div>

<h2>Nuevo Afiliado</h2>
<br />

@using (Html.BeginForm("Create", "FichaAfiliacion", FormMethod.Post, new { id = "formularioCrear", data_persist = "garlic" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Datos Personales</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.ValidationMessage("ERROR_MESSAGE", "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.fk_tipo_documento, htmlAttributes: new { @class = "control-label required-field col-md-2" })

            <div class="col-md-4">
                @*@Html.DropDownList("fk_tipo_documento", null, htmlAttributes: new { @class = "form-control" })*@

                @Html.DropDownListFor(model => model.fk_tipo_documento, new SelectList(
                  new List<Object>{

                       new { value = "1" , text = "DNI" },
                       new { value = "2" , text = "Carné Extranjería"}
                    },
                  "value",
                  "text",
                   1), new { @class = "form-control", @onchange = "validar()" })

                @Html.ValidationMessageFor(model => model.fk_tipo_documento, "", new { @class = "text-danger" })


            </div>
            <div class="col-md-1">
                <input type="button" name="limpiar-1" value="Limpiar" class="btn btn-default" onclick="javascirpt:limpiarDatosPersonales()" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.numero_documento, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.numero_documento, new { htmlAttributes = new { @class = "form-control", @required = "required", @maxlength = "12" } })
                @Html.ValidationMessageFor(model => model.numero_documento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control", @required = "required", @maxlength = "50" } })
                @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @*Html.LabelFor(model => model.apellidos, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <label class="control-label required-field col-md-2" for="apellidos">Apellidos</label>
            <div class="col-md-4">
                @Html.EditorFor(model => model.apellidos, new { htmlAttributes = new { @class = "form-control", @required = "required", @maxlength = "50" } })
                @Html.ValidationMessageFor(model => model.apellidos, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.fecha_nacimiento, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.fecha_nacimiento, new { htmlAttributes = new { @type = "date", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fecha_nacimiento, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.sexo, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.sexo, new SelectList(
                  new List<Object>{

                       new { value = "M" , text = "Masculino" },
                       new { value = "F" , text = "Femenino"}
                    },
                  "value",
                  "text",
                   1), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.sexo, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.estado_civil, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.estado_civil, new SelectList(
                  new List<Object>{

                       new { value = "S" , text = "Soltero" },
                       new { value = "C" , text = "Casado"},
                       new { value = "V" , text = "Viudo"},
                       new { value = "D" , text = "Divorciado"}
                    },
                  "value",
                  "text",
                   1), new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.estado_civil, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.correo, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.correo, new { htmlAttributes = new { @type = "email", @class = "form-control", @maxlength = "64" } })
                @Html.ValidationMessageFor(model => model.correo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.numero_telefono, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.numero_telefono, new { htmlAttributes = new { @class = "form-control", @maxlength = "30" } })
                @Html.ValidationMessageFor(model => model.numero_telefono, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.celular, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.celular, new { htmlAttributes = new { @class = "form-control", @maxlength = "30" } })
                @Html.ValidationMessageFor(model => model.celular, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.direccion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.direccion, new { htmlAttributes = new { @class = "form-control", @maxlength = "100" } })
                @Html.ValidationMessageFor(model => model.direccion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.departamento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.departamento, new SelectList(
                  new List<Object>{

                       new { value = "Lima" , text = "Lima" }
                    },
                  "value",
                  "text",
                   1), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.departamento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.provincia, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.provincia, new SelectList(
                  new List<Object>{

                       new { value = "Lima" , text = "Lima" }
                    },
                  "value",
                  "text",
                   1), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.provincia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.distrito, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.distrito, new SelectList(
                  new List<Object>{
                       new { value = "Lima" , text = "Lima" },
                       new { value = "Ate" , text = "Ate" },
                       new { value = "Lince" , text = "Lince" },
                       new { value = "San Borja" , text = "San Borja" },
                       new { value = "Santiago de Surco" , text = "Santiago de Surco" }
                    },
                  "value",
                  "text",
                   1), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.distrito, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.estado_afiliado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.estado_afiliado, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.estado_afiliado, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.fecha_alta, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.fecha_alta, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.fecha_alta, "", new { @class = "text-danger" })
            </div>
        </div>

        <br />
        <h4>Generar Cuenta</h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.numero_cuenta, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.numero_cuenta, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.numero_cuenta, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-1">
                <input type="button" name="generar-input" id="generarbtn" value="Generar" class="btn btn-default" onclick="generar(this)" />
            </div>
            <div class="col-md-1">
                <input type="button" name="limpiar-2" value="Limpiar" class="btn btn-default" onclick="javascript:limpiarDatosGenerarCuenta()" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.puntos, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.puntos, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.puntos, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.tipo_cuenta, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @*@Html.EditorFor(model => model.tipo_cuenta, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.tipo_cuenta, new SelectList(
                  new List<Object>{

                       new { value = "1" , text = "Titular" },
                       new { value = "2" , text = "Adicional" }
                    },
                  "value",
                  "text",
                   1), new { @class = "form-control", @onchange = "habilitarCuentaTitular(this)" })


                @Html.ValidationMessageFor(model => model.tipo_cuenta, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.cuenta_titular, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelCuentaTitular" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.cuenta_titular, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @*@Html.ValidationMessageFor(model => model.cuenta_titular, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.fk_cuenta_titular, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.fk_cuenta_titular, null)
                <span class="field-validation-valid text-danger" data-valmsg-for="fk_cuenta_titular" id="validacionfk_cuenta_titular"></span>
            </div>

            <div class="col-md-1">
                <input type="button" name="buscar_cuentatitular" id="buscar_cuentatitular" value="Buscar" class="btn btn-default" disabled onclick="cargarCuentaTitular()" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @*@Html.EditorFor(model => model.estado, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })*@
                <input type="text" class="form-control" value="Activo" readonly />
                @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
            </div>
        </div>

        <br />
        <h4>Asignar Tarjeta</h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.numero_cuenta, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.numero_cuenta, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.numero_cuenta, "", new { @class = "text-danger" })
            </div>


        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.numero_tarjeta, htmlAttributes: new { @class = "control-label required-field col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.numero_tarjeta, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.numero_tarjeta, "", new { @class = "text-danger" })
                <a href="@Url.Content("~/TarjetaAfiliacion/Create")" style="display:none" id="irAdministrar" target="_blank">Ingresar Administrar Tarjeta</a>
                @*<input type="text" name="fk_tarjeta_afiliacion" id="fk_tarjeta_afiliacion" />*@
                @*@Html.LabelFor(model => model.fk_tarjeta_afiliacion, htmlAttributes: new { @class = "control-label required-field col-md-2" })
                    @Html.EditorFor(model => model.fk_tarjeta_afiliacion, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.HiddenFor(model => model.fk_tarjeta_afiliacion, "")
                <span class="field-validation-valid text-danger" data-valmsg-for="fk_tarjeta_afiliacion" data-valmsg-replace="true" id="validacionfk_tarjeta_afiliacion"></span>
            </div>

            <div class="col-md-1">
                <input type="button" name="buscar-tarjeta" value="Buscar" class="btn btn-default" onclick="buscarNumeroTarjeta()" />
            </div>
            <div class="col-md-1">
                <input type="button" name="limpiar-3" value="Limpiar" class="btn btn-default" onclick="javascript: limpiarDatosTarjeta()" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.fecha_asignacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.fecha_asignacion, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.fecha_asignacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.estado_tarjeta, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @*Html.EditorFor(model => model.estado_tarjeta, new { htmlAttributes = new { @class = "form-control" } })*@
                <input type="text" class="form-control" value="Activo" readonly />
                @Html.ValidationMessageFor(model => model.estado_tarjeta, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.motivo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.motivo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.motivo, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Grabar" class="btn btn-primary" onclick="procesarFormulario();" />&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
                <input type="button" value="Salir" class="btn btn-danger" onclick="$('input, select').garlic( 'destroy' ); location.href='@Url.Content("~/FichaAfiliacion/")'" />
            </div>
        </div>
    </div>
}


<div id="titular-template" style="display:none">

    <fieldset class="form-inline">
        <div class="form-group">
            <label class="form-control-label">Titular</label>
            <input type="text" name="titular-dni" class="form-control" placeholder="Número de documento" maxlength="12"/>
            <input type="button" value="Filtrar" onclick="filtrarTitular()" class="btn btn-default"/>
        </div>
    </fieldset>

    <hr/>

    <div class="titular-lista">

    </div>

</div>

<div id="tarjeta-template" style="display:none">

    <fieldset class="form-inline">
        <div class="form-group">
            <label class="form-control-label">Número de Tarjeta</label>
            <input type="text" name="tarjeta-numero" class="form-control" placeholder="" maxlength="12"/>
            <input type="button" value="Filtrar" onclick="filtrarTarjeta()" class="btn btn-default" />
            <input type="button" value="Nuevo" onclick="crearTarjeta()" class="btn btn-default" />
        </div>
    </fieldset>

    <hr />

    <div class="tarjeta-lista">

    </div>

</div>

<div id="tarjeta-nuevo-template" style="display:none">

        <div class="form-tarjeta form-horizontal">

            <div class="form-group">
                <label id="numeroTarjeta" class="control-label col-md-4">Número de Tarjeta</label>
                <div class="col-md-8">
                    <input class="form-control" data-val="true" data-val-length="El N° Tarjeta debe poseer un máximo de 12 caracteres." data-val-length-max="12" data-val-length-min="12" data-val-required="El campo N° Tarjeta es obligatorio." id="numeroTarjeta" maxlength="12" name="numeroTarjeta" type="text" value="">
                    <span class="field-validation-valid text-danger" data-valmsg-for="numeroTarjeta" data-valmsg-replace="true"></span>
                </div>
            </div>


            <div class="form-group">
                <label class="control-label col-md-4">Fecha Emisión</label>
                <div class="col-md-8">
                    <input type="text" value="@DateTime.Now.ToString("dd/MM/yyyy")" readonly class="form-control" />
                </div>
            </div>


            <div class="form-group">
                <label class="control-label col-md-4">Fecha Vencimiento</label>
                <div class="col-md-8">
                    <input type="text" value="@DateTime.Now.AddYears(5).ToString("dd/MM/yyyy")" readonly class="form-control" />
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Estado</label>
                <div class="col-sm-8">
                    <input type="text" value="Activo" readonly class="form-control" />
                </div>
            </div>

            <hr />

            <div class="row">
                <div class="col-xs-6 text-right">
                    <input type="button" value="Grabar" class="btn btn-primary" onclick="grabarTarjeta();" />
                </div>
                <div class="col-xs-6">
                    <input type="button" value="Salir" class="btn btn-danger" />
                </div>
            </div>

        </div>

</div>